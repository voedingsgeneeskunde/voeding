<?php

/**
 * @file
 * Module file for the Style Stripper module.
 */

/**
 * Implements hook_permission().
 */
function stylestripper_permission() {
  $permissions = array();
  $permissions['administer stylestripper'] = array(
    'title' => t('Administer Style Stripper'),
    'description' => t('Control stripping of CSS files on theme level.'),
  );
  $permissions['disable stylestripper global'] = array(
    'title' => t('Disable Style Stripper globally'),
    'description' => t('Control if Style Stripper should be disabled globally.'),
  );

  // Adding Style Stripper per theme permission
  foreach (list_themes() as $theme) {
    $permissions['disable stylestripper theme ' . $theme->name] = array(
      'title' => t('Disable Style Stripper: @theme', array('@theme' => $theme->info['name'])),
      'description' => t('Control if Style Stripper should be disabled for theme "@theme".', array('@theme' => $theme->info['name'])),
    );
  }

  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function stylestripper_menu() {
  $items = array();
  $items['admin/appearance/stylestripper'] = array(
    'title' => 'Style Stripper',
    'description' => 'Configure which module CSS files to be loaded on theme level.',
    'page callback' => 'stylestripper_admin_global_settings',
    'access arguments' => array('administer stylestripper'),
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/appearance/stylestripper/global'] = array(
    'title' => 'Global settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  foreach (list_themes() as $theme) {
    $items['admin/appearance/stylestripper/' . $theme->name] = array(
      'title' => $theme->info['name'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('stylestripper_admin_theme_settings_form', $theme->name), 
      'type' => MENU_LOCAL_TASK, 
      'access callback' => '_stylestripper_admin_access', 
      'access arguments' => array($theme),
    );
  }  
  return $items;
}

/**
 * Global settings page for the style stripper module.
 *
 * @return string
 */
function stylestripper_admin_global_settings() {
  $form_global = drupal_get_form('stylestripper_admin_global_settings_form');
  $form_index = drupal_get_form('stylestripper_admin_index_form');
  $output = drupal_render($form_global);
  $output .= drupal_render($form_index);
  return $output;
}


/**
 * Global settings form.
 *
 * @return array
 */
function stylestripper_admin_global_settings_form() {
  $form['global'] = array(
    '#type' => 'fieldset',
    '#title' => t('Global settings'),
    '#description' => t('Global settings for the style stripper module.'),
  );
  $form['global']['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable style stripper'),
    '#description' => t('Check if style stripper should be enabled. Remember also to enable it on theme level.'),
    '#default_value' => variable_get('stylestripper_enabled', 0),
  );
  $form['global']['disable_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Checked CSS files are disabled'),
    '#description' => t('The default mode of style stripper is that checked files are enabled. If this field is checked, then will the functionality be reversed, which means that checked files are disabled.'),
    '#default_value' => variable_get('stylestripper_disable_mode', 0),
  );
  $form['global']['skip_modules'] = array(
    '#type' => 'textarea',
    '#title' => t('Modules that not should be indexed.'),
    '#description' => t('Write the module names that should not be indexed. Enter one module per line.'),
    '#default_value' => variable_get('stylestripper_skip_modules', ''),
  );  
  $form['global']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );
  return $form;
}

/**
 * Process the global settings form.
 *
 * @param array $form
 * @param array $form_state
 */
function stylestripper_admin_global_settings_form_submit($form, &$form_state) {
  variable_set('stylestripper_enabled', $form_state['values']['status']);
  variable_set('stylestripper_disable_mode', $form_state['values']['disable_mode']);
  variable_set('stylestripper_skip_modules', $form_state['values']['skip_modules']);

  // Setting OK message
  drupal_set_message(t('Global settings are now saved!'));
  
  return '';
}

/**
 * Update CSS file index form.
 *
 * @return array
 */
function stylestripper_admin_index_form() {
 $count = db_query("SELECT COUNT(fid) FROM {stylestripper}")->fetchField();
 $form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update CSS file index'),
    '#description' => t('!count CSS files is in the index. Search modules for new CSS files.', array('!count' => $count)),
  );
  $form['search']['search'] = array(
    '#type' => 'submit',
    '#value' => t('Update CSS file index'),
  );
  return $form;
}

/**
 * Process the update index form and scannes the module folders for CSS files.
 *
 * @param array $form
 * @param array $form_state
 */
function stylestripper_admin_index_form_submit($form, &$form_state) {
  global $base_path;
  $skip_modules = explode("\n", variable_get('stylestripper_skip_modules', ''));
  array_walk($skip_modules, '_stylestripper_trim_string');
  
  // Scanning module folders for CSS files and saving index in database.
  $result = db_query("SELECT * FROM {system} WHERE type = 'module' AND status = 1");
  while ($module = $result->fetchObject()) {
    if (!in_array($module->name, $skip_modules)) {
      $module_path = pathinfo($module->filename, PATHINFO_DIRNAME);      
      $css_files = file_scan_directory($module_path, '/\.css$/', array('nomask' => '/(\.\.?|CVS|\.svn)$/'));
      foreach ((array)$css_files as $key => $file) {
        $fid = db_query("SELECT fid FROM {stylestripper} WHERE module_name = :modulename AND css_filename = :filename", array(':modulename' => $module->name, ':filename' => $file->filename))->fetchField();
        if (is_numeric($fid)) {
          db_query("UPDATE {stylestripper} SET updated = 1 WHERE fid = :fid", array(':fid' => $fid));
        }
        else {
          db_query("INSERT INTO {stylestripper} (module_name, css_filename, updated) VALUES (:modulename, :filename, 1)", array(':modulename' => $module->name, ':filename' => $file->filename));  
        }
      }
    }
  }
  
  // Cleaning up old file records
  $result = db_query("SELECT fid FROM {stylestripper} WHERE updated = 0");
  while ($id = $result->fetchField()) {
    db_query("DELETE FROM {stylestripper_settings} WHERE fid = :fid", array(':fid' => $fid));
    db_query("DELETE FROM {stylestripper} WHERE fid = :fid", array(':fid' => $fid));
  }
  db_query("UPDATE {stylestripper} SET updated = 0");  

  // Setting OK message
  drupal_set_message(t('CSS file index updated!'));
  
  return '';
}

/**
 * Trim string used together with array_walk.
 *
 * @param string $foo
 */
function _stylestripper_trim_string(&$foo) { 
  $foo = trim($foo); 
}

/**
* Theme settings form.
* 
* @param array $form_state
* @param string $theme
* @return array
*/
function stylestripper_admin_theme_settings_form($form, &$form_state, $theme) {
  drupal_add_css(drupal_get_path('module', 'stylestripper') . '/stylestripper.admin.css');
  
  // General settings for this theme.
  $form['theme'] = array(
    '#type' => 'fieldset',
    '#title' => t('Theme settings'),
  );
  $form['theme']['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable style stripper for this theme'),
    '#description' => t('Check if style stripper should be enabled for this theme. Remember also to enable it under global settings.'),
    '#default_value' => variable_get('stylestripper_'.$theme.'_enabled', 0),
  ); 
  
  // Creating fields for each CSS file.
  $query = db_select('stylestripper', 's');
  $query->leftJoin('stylestripper_settings', 'ss', 's.fid = ss.fid AND ss.theme = :theme', array(':theme' => $theme));
  $query
    ->fields('ss', array('status'))
    ->fields('s')
    ->orderBy('s.module_name')
    ->orderBy('s.css_filename');
  $result = $query->execute();
  $default_value = array();
  $options = array();
  $i = 0;
  foreach ($result as $row) {
    $options[$row->fid] = array(
      'module' => $row->module_name, 
      'css_file' => $row->css_filename
    );
    $default_value[$row->fid] = $row->status ? TRUE : FALSE;
  }  
  
  // Table headers
  $header = array();
  $header['module'] = array(
    'data' => t('Module'), 
    'class' => 'module', 
  );
  $header['css_file'] = array(
    'data' => t('CSS file'), 
    'class' => 'css-file', 
  );  
 
  // Table field with all files.
  $form['files'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No files found'),
    '#default_value' => $default_value,
    '#sticky' => TRUE,
  );  
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save settings'));
  return $form;
}

/**
* Saving theme settings.
* 
* @param array $form
* @param array $form_state
* @return string
*/
function stylestripper_admin_theme_settings_form_submit($form, &$form_state) {
  $theme_name = arg(3);
  $theme = db_query("SELECT name FROM {system} WHERE type = 'theme' AND name = :themename AND status = 1", array(':themename' => $theme_name))->fetchField();
  if (empty($theme)) {
    drupal_set_message(t('Theme %theme_name does not exist!', array('!theme_name' => $theme_name)), 'error');
    return '';
  }

  // Saving settings
  variable_set('stylestripper_'.$theme.'_enabled', $form_state['values']['status']);
  
  // Deleting old records
  db_query("DELETE FROM {stylestripper_settings} WHERE theme = :themename", array(':themename' => $theme));
  
  // Saving new records
  foreach($form_state['values']['files'] as $fid => $status) {
    db_query("INSERT INTO {stylestripper_settings} (fid, theme, status) VALUES (:fid, :themename, :status)", array(':fid' => $fid, ':themename' => $theme, ':status' => ($status) ? 1 : 0));
  }
  drupal_set_message(t('The style stripper settings for %theme_name is now updated!', array('%theme_name' => $theme)));
  return '';  
}

/**
* Loading settings for a specific theme
* If no theme is given as argument, we will instead load the settings for the active theme
* 
* @param string $theme
* @return mixed
*/
function stylestripper_load_settings($theme = NULL) {
  static $settings;
  
  // If theme was null, then we use the active theme.
  if (is_null($theme)) {
    global $theme;
  }
  
  // If $theme is empty we return FALSE
  if (empty($theme)) {
    return FALSE;
  }
  
  // If settings was not already loaded for this theme, then we load them.
  if (!isset($settings[$theme])) {
    $query = db_select('stylestripper', 's');
    $query->innerJoin('stylestripper_settings', 'ss', 's.fid = ss.fid AND ss.theme = :theme', array(':theme' => $theme));
    $query
      ->fields('ss', array('status'))
      ->fields('s', array('css_filename'));
    $result = $query->execute();    
    foreach($result as $row) {
      $settings[$theme][$row->css_filename] = $row->status ? TRUE : FALSE;
    }
  }
  
  // Return array with settings or returning FALSE
  if (isset($settings[$theme])) {
    return $settings[$theme];
  } 
  else {
    return FALSE;  
  }
}

/**
 * Implements hook_css_alter().
 */
function stylestripper_css_alter(&$css) {
  global $theme;

  // Checking user permissions
  if (user_access('disable stylestripper global')) {
    return;
  }
  if (user_access('disable stylestripper theme ' . $theme)) {
    return;
  }

  // Checking if style stripper is enabled
  if (variable_get('stylestripper_enabled', 0) && variable_get('stylestripper_'.$theme.'_enabled', 0)) {  
    // Loading settings
    $settings = stylestripper_load_settings($theme);
    // Checking if settings is an array
    if (is_array($settings)) {
      // Looping through added CSS files and unsetting files that we dont want to use
      foreach((array)$css as $filepath => $item) {
        $file = basename($filepath);
        if (isset($settings[$file])) {
          if ((!variable_get('stylestripper_disable_mode', 0) && !$settings[$file]) || (variable_get('stylestripper_disable_mode', 0) && $settings[$file])) {
            unset($css[$filepath]);                  
          }
        }
      }
    }
  }
}

/**
 * Menu item access callback - only admin theme or enabled themes can be accessed.
 */
function _stylestripper_admin_access($theme) {
  return user_access('administer stylestripper') && ($theme->status || $theme->name == variable_get('admin_theme', '0'));
}
